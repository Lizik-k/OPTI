import pandas as pd
import csv
import plotly.express as px
import streamlit as st
from datetime import date, datetime


# ====================== –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶ ======================
if 'page' not in st.session_state:
    st.session_state.page = 'page1'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

# –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
st.markdown("""
<style>
    .nav-button {
        margin: 5px;
        padding: 10px;
        border-radius: 5px;
        width: 100%;
    }
    .nav-button.active {
        background-color: #4CAF50;
        color: white;
    }
</style>
""", unsafe_allow_html=True)



# –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã

#–ü–∞—Ä—Ç–Ω–µ—Ä—ã –ê–ó–°, –Ω–æ–º–µ—Ä–∞, —Ä–µ–≥–∏–æ–Ω—ã
spisok_azs = pd.read_excel('—Å–ø–∏—Å–æ–∫ –ê–ó–°.xlsx')
spisok_azs['–†–µ–≥–∏–æ–Ω'] = spisok_azs['–ê–¥—Ä–µ—Å –ê–ó–°'].str.split(',').str[0]
# partners = pd.read_csv(r'–°–ø–∏—Å–æ–∫ –ê–ó–°.csv')
# print(partners
#       )


partner_azs = spisok_azs['–ü–∞—Ä—Ç–Ω–µ—Ä']
name_partner = partner_azs.drop_duplicates()
number_azs =  pd.to_numeric(spisok_azs['–ê–ó–° '])
region = spisok_azs['–†–µ–≥–∏–æ–Ω'].drop_duplicates()
# adres = list(spisok_azs['–ê–¥—Ä–µ—Å –ê–ó–°'])
# reg = []
# for i in adres:
#     b = i.split(',')[0]
#     reg.append(b)
# reg = pd.DataFrame(reg)
# region =  reg.drop_duplicates()


#–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
data = pd.read_excel('–î–∞—Ç–∞–§—Ä–µ–π–º.xlsx')
max_date = max(list(data['–î–∞—Ç–∞']))
min_date = min(list(data['–î–∞—Ç–∞']))
start_date = min_date.split('-')
start_day = int(start_date[2])
start_month = int(start_date[1])
start_year = int(start_date[0])
end_date = max_date.split('-')
end_day = int(end_date[2])
end_month = int(end_date[1])
end_year = int(end_date[0])
data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞']).dt.date
data['–ê–ó–°'] = pd.to_numeric(data['–ê–ó–°'])
data['–†–µ–π—Ç–∏–Ω–≥'] = pd.to_numeric(data['–†–µ–π—Ç–∏–Ω–≥'])


# –¢–µ–≥–∏
tags_category = pd.read_excel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_—Ç–µ–≥–∏.xlsx')
tag_list =  list(pd.DataFrame(tags_category)['–¢–µ–≥'].drop_duplicates())

# –¢–µ–≥–∏
tonal = pd.read_excel('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.xlsx')


# ====================== –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–û–ï –ú–ï–ù–Æ ======================
cols = st.columns(3)
with cols[0]:
    if st.button('üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–≥–∏ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', key='btn_page1'):
        st.session_state.page = 'page1'

with cols[1]:
    if st.button('üç© –¢–æ–ø—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', key='btn_page2'):
        st.session_state.page = 'page2'
with cols[2]:
    if st.button('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤', key='btn_page3'):
        st.session_state.page = 'page3'

st.markdown("---")  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è


# ====================== –°–¢–†–ê–ù–ò–¶–ê 1 ======================
if st.session_state.page == 'page1':

    # –î–ê–®–ë–û–†–î

    st.write("""# –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ —Å –≥–µ–æ—Ä–µ—Å—É—Ä—Å–æ–≤""")
    #st.write("""## –í–µ—Ä—Å–∏—è 0.0.1""")

    st.sidebar.header('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã')

    # st.sidebar.date_input(
    #     "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
    #     value=[None, None],  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    #     min_value=start_date,  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞
    #     max_value= end_date, # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
    #     format="DD.MM.YYYY",  # —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    #     key="date_range",
    #     range = True
    #
    # )

    #
    st.sidebar.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:")
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start = st.date_input("–ù–∞—á–∞–ª–æ",
                              value = date(start_year, start_month, start_day),
                              min_value=date(start_year, start_month, start_day),
                              max_value=date(end_year, end_month, end_day))
    with col2:
        end = st.date_input("–ö–æ–Ω–µ—Ü",
                            value=date(end_year, end_month, end_day),
                            min_value=date(start_year, start_month, start_day),
                            max_value=date(end_year, end_month, end_day))


    region = st.sidebar.multiselect('–†–µ–≥–∏–æ–Ω', (region), region)
    #partner = st.sidebar.multiselect('–ü–∞—Ä—Ç–Ω–µ—Ä', (name_partner), name_partner)
    if region:
        available_partners = spisok_azs[spisok_azs['–†–µ–≥–∏–æ–Ω'].isin(region)]['–ü–∞—Ä—Ç–Ω–µ—Ä'].unique().tolist()
    else:
        available_partners = spisok_azs['–ü–∞—Ä—Ç–Ω–µ—Ä'].unique().tolist()
    # # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º
    partner = st.sidebar.multiselect(
        '–ü–∞—Ä—Ç–Ω–µ—Ä',
        options=available_partners,
        default=available_partners
    )
    if region or partner:
        filter_condition = True
        if region:
            filter_condition &= (spisok_azs['–†–µ–≥–∏–æ–Ω'].isin(region))
        if partner:
            filter_condition &= (spisok_azs['–ü–∞—Ä—Ç–Ω–µ—Ä'].isin(partner))

        available_azs = spisok_azs[filter_condition]['–ê–ó–° '].unique().tolist()
    else:
        available_azs = spisok_azs['–ê–ó–° '].unique().tolist()

    azs = st.sidebar.multiselect(
        '–ù–æ–º–µ—Ä –ê–ó–°',
        options=available_azs,
        default=available_azs
    )




    filtered_data = data[
        (data['–î–∞—Ç–∞'] >= start) &
        (data['–î–∞—Ç–∞'] <= end) &
        (data['–†–µ–≥–∏–æ–Ω'].isin(region)) &
        (data['–ê–ó–°'].isin(azs)) &
        (data['–ü–∞—Ä—Ç–Ω–µ—Ä'].isin(partner))
    ]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    avg_rating = filtered_data['–†–µ–π—Ç–∏–Ω–≥'].mean() if not filtered_data.empty else 0
    count_records = len(filtered_data)

    # if avg_rating < 3.5:
    #     color = "red"
    # elif avg_rating < 4.6:
    #     color = "orange"
    # else:
    #     color = "green"


    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –º–µ—Ç—Ä–∏–∫–æ–π
    rank_avg, len_otz = st.columns(2)
    # st.markdown(
    #     f"""
    #        <div style="
    #            background-color: {color}20;
    #            padding: 10px;
    #            border-radius: 10px;
    #            border-left: 5px solid {color};
    #        ">
    #            <div style="font-size: 0.8em; color: #666;">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
    #            <div style="font-size: 1.5em; font-weight: bold;">{}</div>
    #        </div>
    #        """,
    #     unsafe_allow_html=True
    # )
    with rank_avg:
        st.metric(
            label="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
            value=f"{avg_rating:.1f}",
            help="–†–∞—Å—Å—á–∏—Ç–∞–Ω –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º"
        )


    with len_otz:
        st.metric(
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫",
            value=count_records
        )





    # –î–ò–ù–ê–ú–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–ê - –ª–∏–Ω–µ–π–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞

    cumulative_daily = (filtered_data.sort_values('–î–∞—Ç–∞')
                        .groupby('–î–∞—Ç–∞')['–†–µ–π—Ç–∏–Ω–≥']
                        .mean()
                        .expanding()
                        .mean()
                        .reset_index())

    # st.line_chart(
    #         cumulative_daily.set_index('–î–∞—Ç–∞'),
    #         y='–†–µ–π—Ç–∏–Ω–≥',
    #         height=400
    #     )

    fig = px.line(
        cumulative_daily,
        x='–î–∞—Ç–∞',
        y='–†–µ–π—Ç–∏–Ω–≥',
        title='–ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –¥–Ω—è–º',
        labels={'–†–µ–π—Ç–∏–Ω–≥': '–†–µ–π—Ç–∏–Ω–≥', '–î–∞—Ç–∞': '–î–∞—Ç–∞'},
        height=400,
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    fig.update_layout(
        hovermode='x unified',  # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        plot_bgcolor='white',  # –±–µ–ª—ã–π —Ñ–æ–Ω
        xaxis=dict(showgrid=True, gridcolor='lightgray'),  # —Å–µ—Ç–∫–∞ –ø–æ X
        yaxis=dict(showgrid=True, gridcolor='lightgray'),  # —Å–µ—Ç–∫–∞ –ø–æ Y
    )

    # –í—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
    st.plotly_chart(fig, use_container_width=True)



    # –ö–û–õ–ò–ß–ï–°–¢–í–û –¢–ï–ì–û–í - –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞

    data_with_tags = pd.merge(data, tags_category, on='id –û—Ç–∑—ã–≤–∞')

    filtered_data_tag = data_with_tags[
        (data_with_tags['–î–∞—Ç–∞'] >= start) &
        (data_with_tags['–î–∞—Ç–∞'] <= end) &
        (data_with_tags['–†–µ–≥–∏–æ–Ω'].isin(region)) &
        (data_with_tags['–ê–ó–°'].isin(azs)) &
        (data_with_tags['–ü–∞—Ä—Ç–Ω–µ—Ä'].isin(partner))
    ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–≥–∞–º
    tag_counts = filtered_data_tag['–¢–µ–≥'].value_counts().reset_index()
    tag_counts.columns = ['–¢–µ–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    # –†–∞–∑–º–µ—â–∞–µ–º –≤ –æ–¥–∏–Ω —Ä—è–¥
    tags_colc, ton_colc = st.columns([6, 1])  # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏

    if not tag_counts.empty:
        fig_tag = px.pie(
            tag_counts,
            values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            names='–¢–µ–≥',
            hole=0.5,
            title=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤',
            color_discrete_sequence=px.colors.qualitative.Prism
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω
        fig_tag.update_traces(
            textposition='outside',
            textinfo='percent+label',
            pull=[0.05] * len(tag_counts),
        insidetextfont = dict(size=12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        )

        fig_tag.update_layout(
            showlegend=False,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-1,
                xanchor="center",
                x=0.5
            ),
            margin=dict(t=50, b=0, l=0, r=0),
            annotations=[
                dict(
                    text=f"–í—Å–µ–≥–æ: {tag_counts['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()}",
                    x=0.5, y=0.5,
                    font_size=16,
                    showarrow=False
                )
            ]

        )

        # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
        fig_tag.update_layout(
            clickmode='event+select'
        )


        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        #st.plotly_chart(fig_tag, use_container_width=True)
        with tags_colc:
            selected = st.plotly_chart(fig_tag, use_container_width=True)  # use_container_width —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏
            # # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
            # if selected.select_data:
            #     clicked_tag = selected.select_data[0]['points'][0]['label']
            #     comments = tag_counts[tag_counts['–¢–µ–≥'] == clicked_tag]['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'].iloc[0]
            #
            #     st.subheader(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ç–µ–≥–æ–º '{clicked_tag}':")
            #     for comment in comments:
            #         st.write(f"- {comment}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.write("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º")
        tag_counts['–î–æ–ª—è'] = (tag_counts['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] / tag_counts['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() * 100).round(1)
        st.dataframe(
            tag_counts.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False),
            column_config={
                "–¢–µ–≥": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn(format="%d"),
                "–î–æ–ª—è": st.column_config.NumberColumn(format="%.1f%%")
            },
            hide_index=True
        )

    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")




    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    data_with_ton = pd.merge(data, tonal, on='id –û—Ç–∑—ã–≤–∞')

    filtered_data_tag_ton = data_with_ton[
        (data_with_ton['–î–∞—Ç–∞'] >= start) &
        (data_with_ton['–î–∞—Ç–∞'] <= end) &
        (data_with_ton['–†–µ–≥–∏–æ–Ω'].isin(region)) &
        (data_with_ton['–ê–ó–°'].isin(azs)) &
        (data_with_ton['–ü–∞—Ä—Ç–Ω–µ—Ä'].isin(partner))
    ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    sentiment_counts = filtered_data_tag_ton['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'].value_counts().reset_index()
    sentiment_counts.columns = ['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    # –°—Ç—Ä–æ–∏–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    if not sentiment_counts.empty:
        fig_ton = px.pie(
            sentiment_counts,
            values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            names='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            title="""–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å""",


            color='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            color_discrete_map={
                '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è': '#73af48',
                '–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è': '#ff5454',
                '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è': '#ffe354',
                '–°–º–µ—à–∞–Ω–Ω–∞—è': '#a154ff'
            },
            hole=0
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fig_ton.update_traces(
            textposition='inside',
            textinfo='percent',
            insidetextfont=dict(size=12, color='white'),
            #marker=dict(line=dict(color='#000000', width=1))
            marker=dict(
                colors=['#73af48', '#ff5454', '#ffe354', '#a154ff']  # –î—É–±–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –∑–¥–µ—Å—å!
            )
        )

        fig_ton.update_layout(
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-0.2,
                xanchor="center",
                x=0.5
            ),
            margin=dict(t=50, b=0, l=0, r=0)
        )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        #st.plotly_chart(fig_ton, use_container_width=True)

        with ton_colc:
            st.plotly_chart(fig_ton, use_container_width=True)

        # # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        # st.write("### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º")
        # sentiment_counts['–î–æ–ª—è'] = (sentiment_counts['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] / sentiment_counts['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() * 100).round(1)
        # st.dataframe(
        #     sentiment_counts.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False),
        #     column_config={
        #         "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": st.column_config.TextColumn("–¢–∏–ø —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"),
        #         "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn(format="%d"),
        #         "–î–æ–ª—è": st.column_config.NumberColumn(format="%.1f%%")
        #     },
        #     hide_index=True
        # )
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")



    # –¢–ï–ì–ò –í–ù–£–¢–†–ò –ö–ê–¢–ï–ì–û–†–ò–ò–ò - –°–¢–û–õ–ë–ß–ê–¢–ê–Ø –î–ò–ê–ì–†–ê–ú–ú–ê



    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not filtered_data_tag.empty:
        categories = ['–ü–ï–†–°–û–ù–ê–õ', '–ü–û–ú–ï–©–ï–ù–ò–ï', '–¢–û–ü–õ–ò–í–û', '–û–ü–õ–ê–¢–ê', '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û']
        figs = []

        for category in categories:
            category_data = filtered_data_tag[filtered_data_tag['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
            if not category_data.empty:
                grouped = category_data.groupby('–¢–µ–≥').size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                grouped = grouped.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False)
                fig = px.bar(
                    grouped,
                    x='–¢–µ–≥',
                    y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    title=f'{category}',
                    color='–¢–µ–≥',
                    color_discrete_sequence=px.colors.qualitative.Pastel,
                    height=400,
                    category_orders={"–¢–µ–≥": grouped['–¢–µ–≥'].tolist()}
                )
                fig.update_layout(showlegend=False,
                                  xaxis=dict(
                                      tickangle=-45,
                                      tickfont=dict(size=10),
                                      tickvals=grouped['–¢–µ–≥'],  # –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                                      ticktext=[t.replace(' ', '\n') for t in grouped['–¢–µ–≥']]  # –ü–µ—Ä–µ–Ω–æ—Å —Å–ª–æ–≤
                                  ),
                                  margin=dict(b=150)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
                                   #margin=dict(t=50, b=100)
                                  )

                figs.append(fig)
            else:
                figs.append(None)

        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - 3 –≥—Ä–∞—Ñ–∏–∫–∞
        cols = st.columns(3)
        for i in range(3):
            with cols[i]:
                if figs[i]:
                    st.plotly_chart(figs[i], use_container_width=True)
                else:
                    st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {categories[i]}")

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - 2 –≥—Ä–∞—Ñ–∏–∫–∞
        cols = st.columns(2)
        for i in range(3, 5):
            with cols[i - 3]:
                if figs[i]:
                    st.plotly_chart(figs[i], use_container_width=True)
                else:
                    st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {categories[i]}")

    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")


    # –†–∞–∑–º–µ—â–∞–µ–º –≤ –æ–¥–∏–Ω —Ä—è–¥
    cat_colc, pust, ton_bar  = st.columns([2, 1, 5])  # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏


    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ - –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–∞—â–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

    category_counts = filtered_data_tag['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().reset_index()
    category_counts.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.pie(
        category_counts,
        values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
        hole=0,  # –ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫—Ä—É–≥–æ–≤–æ–π)
        color_discrete_sequence=px.colors.qualitative.Prism # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig.update_traces(
        textposition='inside',
        textinfo='percent+label',
        insidetextfont=dict(size=12, color='white'),
        pull=[0.02]*len(category_counts)  # –õ–µ–≥–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤
    )

    fig.update_layout(
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        margin=dict(t=50, b=0, l=0, r=0),
        annotations=[dict(
            text=f" ",
            x=0.5, y=0.5,
            font_size=16,
            showarrow=False
        )]
    )

    with cat_colc:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        st.plotly_chart(fig, use_container_width=True)

    # –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
    if not filtered_data_tag_ton.empty:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—è–º
        grouped_data = filtered_data_tag_ton.groupby(['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        tonality_order = ['–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è', '–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', '—Å–º–µ—à–∞–Ω–Ω–∞—è']
        color_map = {
            '–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è': '#73af48',
            '–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è': '#ff5454',
            '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è': '#ffe354',
            '—Å–º–µ—à–∞–Ω–Ω–∞—è': '#a154ff'
        }

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = px.bar(
            grouped_data,
            x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            color='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            barmode='group',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            category_orders={'–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å': tonality_order},
            color_discrete_map=color_map,

            height=500
        )
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        # for i, ton in enumerate(tonality_order):
        #     fig.update_traces(
        #         marker_color=color_map[ton],
        #         selector={'name': ton}  # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—ã —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º
        #     )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fig.update_layout(
            xaxis_title='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
            yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
            legend_title='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            xaxis={'tickangle': -45, 'categoryorder': 'total descending'},
            uniformtext_minsize=8,
            margin=dict(b=150)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        fig.update_traces(
            texttemplate='%{y}',
            textposition='outside'
        )
        with ton_bar:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            st.plotly_chart(fig, use_container_width=True)


    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")


    # –°–¢–û–õ–ë–ß–ê–¢–ê–Ø –î–ò–ê–ì–†–ê–ú–ú–ê –° –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –ö–ê–ñ–î–û–ô –û–¶–ï–ù–ö–ò
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
    rating_counts = filtered_data['–†–µ–π—Ç–∏–Ω–≥'].value_counts().reindex([5, 4, 3, 2, 1], fill_value=0).reset_index()
    rating_counts.columns = ['–†–µ–π—Ç–∏–Ω–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.bar(
        rating_counts,
        x='–†–µ–π—Ç–∏–Ω–≥',
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫',
        text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        color='–†–µ–π—Ç–∏–Ω–≥',
        color_discrete_map={
            5: '#4CAF50',  # –ó–µ–ª–µ–Ω—ã–π
            4: '#8BC34A',  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            3: '#FFC107',  # –ñ–µ–ª—Ç—ã–π
            2: '#FF9800',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            1: '#F44336'  # –ö—Ä–∞—Å–Ω—ã–π
        },
        category_orders={'–û—Ü–µ–Ω–∫–∞': [5, 4, 3, 2, 1]}  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
    fig.update_traces(
        textposition='outside',
        marker_line_color='white',
        marker_line_width=1.5,
        opacity=0.9
    )

    fig.update_layout(
        xaxis_title='–û—Ü–µ–Ω–∫–∞',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫',
        showlegend=False,
        uniformtext_minsize=8,
        plot_bgcolor='rgba(0,0,0,0)',
        margin=dict(t=40, b=0, l=0, r=0)
    )

    # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
    st.plotly_chart(fig, use_container_width=True)


    st.write('## –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞–º')

    filtered_data = data[
        (data['–î–∞—Ç–∞'] >= start) &
        (data['–î–∞—Ç–∞'] <= end) &
        (data['–†–µ–≥–∏–æ–Ω'].isin(region)) &
        (data['–ê–ó–°'].isin(azs)) &
        (data['–ü–∞—Ä—Ç–Ω–µ—Ä'].isin(partner))
        ]
    filtered_data['–ö–∞—Ç–∞–ª–æ–≥'] = filtered_data['–ö–∞—Ç–∞–ª–æ–≥'].replace(
        ['2–ì–ò–°', '2gis', '2 –≥–∏—Å'],
        '2GIS'
    )
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞–º
    catalog_stats = filtered_data['–ö–∞—Ç–∞–ª–æ–≥'].value_counts().reset_index()
    catalog_stats.columns = ['–ö–∞—Ç–∞–ª–æ–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤']

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    catalog_stats = catalog_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤', ascending=True)

    # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.bar(
        catalog_stats,
        y='–ö–∞—Ç–∞–ª–æ–≥',
        x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
        orientation='h',
        title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞–º',
        text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
        color='–ö–∞—Ç–∞–ª–æ–≥',
        color_discrete_sequence=px.colors.qualitative.Pastel,
        height=500  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    fig.update_traces(
        textposition='outside',
        marker_line_color='white',
        marker_line_width=1.5,
        opacity=0.9
    )

    fig.update_layout(
        yaxis_title=None,
        xaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
        showlegend=False,
        uniformtext_minsize=8,
        plot_bgcolor='rgba(0,0,0,0)',
        margin=dict(t=40, b=0, l=0, r=0)
    )

    # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
    st.plotly_chart(fig, use_container_width=True)


    st.write('### 2GIS')

    filtered_data_tag['–ö–∞—Ç–∞–ª–æ–≥'] = filtered_data_tag['–ö–∞—Ç–∞–ª–æ–≥'].replace(
        ['2–ì–ò–°', '2gis', '2 –≥–∏—Å'],
        '2GIS'
    )

    df_2gis = filtered_data_tag[filtered_data_tag['–ö–∞—Ç–∞–ª–æ–≥'].isin(['2GIS', '2–ì–ò–°'])]
    df_2gis_all = filtered_data[filtered_data['–ö–∞—Ç–∞–ª–æ–≥'] == '2GIS']
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

    if df_2gis.empty or df_2gis_all.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ 2GIS")
    else:

        col1, col2 = st.columns(2)

        with col1:
            # –ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_counts = df_2gis['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().reset_index()
            category_counts.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

            fig_2g = px.pie(
                category_counts,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                hole=0.5,
                color_discrete_sequence=px.colors.qualitative.Prism
            )
            fig_2g.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_2g, use_container_width=True, key='1')

        with col2:
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è 2GIS
            avg_rating = df_2gis_all['–†–µ–π—Ç–∏–Ω–≥'].mean()
            num_comments = len(df_2gis_all)
            st.metric(
                label="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                value=f"{avg_rating:.1f}"
            )
            st.metric(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                value=f"{num_comments}"
            )

    st.write('### –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã')
    df_ya = filtered_data_tag[filtered_data_tag['–ö–∞—Ç–∞–ª–æ–≥'] == '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã']
    df_ya_all = filtered_data[filtered_data['–ö–∞—Ç–∞–ª–æ–≥'] == '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã']

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if df_ya.empty or df_ya_all.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ Google Business Profile")
    else:

        col1, col2 = st.columns(2)

        with col1:
            # –ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_counts = df_ya['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().reset_index()
            category_counts.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

            fig_ya = px.pie(
                category_counts,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                hole=0.5,
                color_discrete_sequence=px.colors.qualitative.Prism
            )
            fig_ya.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_ya, use_container_width=True, key='2')

        with col2:
            # –ú–µ—Ç—Ä–∏–∫–∏
            avg_rating = df_ya_all['–†–µ–π—Ç–∏–Ω–≥'].mean()
            num_comments = len(df_ya_all)
            st.metric(
                label="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                value=f"{avg_rating:.1f}"
            )
            st.metric(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                value=f"{num_comments}"
            )

    st.write('### Google Business Profile')
    df_go = filtered_data_tag[filtered_data_tag['–ö–∞—Ç–∞–ª–æ–≥'] == 'Google Business Profile']
    df_go_all = filtered_data[filtered_data['–ö–∞—Ç–∞–ª–æ–≥'] == 'Google Business Profile']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if df_go.empty or df_go_all.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ Google Business Profile")
    else:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

        col1, col2 = st.columns(2)

        with col1:
            # –ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_counts = df_go['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().reset_index()
            category_counts.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

            fig_go = px.pie(
                category_counts,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                hole=0.5,
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
            fig_go.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_go, use_container_width=True, key='3')

        with col2:
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è 2GIS
            avg_rating = df_go_all['–†–µ–π—Ç–∏–Ω–≥'].mean()
            num_comments = len(df_go_all)
            st.metric(
                label="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                value=f"{avg_rating:.1f}"
            )
            st.metric(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                value=f"{num_comments}"
            )

    st.write('### flamp.ru')


    df_fl = filtered_data_tag[filtered_data_tag['–ö–∞—Ç–∞–ª–æ–≥'] == 'flamp.ru']
    df_fl_all = filtered_data[filtered_data['–ö–∞—Ç–∞–ª–æ–≥'] == 'flamp.ru']
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if df_fl.empty or df_fl_all.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ flamp.ru")
    else:
        col1, col2 = st.columns(2)

        with col1:
            # –ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_counts = df_fl['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].value_counts().reset_index()
            category_counts.columns = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

            fig_fl = px.pie(
                category_counts,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                hole=0.5,
                color_discrete_sequence=px.colors.qualitative.Prism
            )
            fig_fl.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_fl, use_container_width=True, key='4')

        with col2:
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è 2GIS
            avg_rating = df_fl_all['–†–µ–π—Ç–∏–Ω–≥'].mean()
            num_comments = len(df_fl_all)
            st.metric(
                label="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                value=f"{avg_rating:.1f}"
            )
            st.metric(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                value=f"{num_comments}"
            )



# ====================== –°–¢–†–ê–ù–ò–¶–ê 2 ======================
elif st.session_state.page == 'page2':
    st.write("""# –¢–æ–ø-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤""")

    st.sidebar.header('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã')

    st.sidebar.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:")
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start = st.date_input("–ù–∞—á–∞–ª–æ",
                              value=date(start_year, start_month, start_day),
                              min_value=date(start_year, start_month, start_day),
                              max_value=date(end_year, end_month, end_day))
    with col2:
        end = st.date_input("–ö–æ–Ω–µ—Ü",
                            value=date(end_year, end_month, end_day),
                            min_value=date(start_year, start_month, start_day),
                            max_value=date(end_year, end_month, end_day))

    tags = st.selectbox('–¢–µ–≥', (tag_list), None)

    data_with_tags = pd.merge(data, tags_category, on='id –û—Ç–∑—ã–≤–∞')

    filtered_data = data_with_tags[
        (data_with_tags['–î–∞—Ç–∞'] >= start) &
        (data_with_tags['–î–∞—Ç–∞'] <= end) &
        (data_with_tags['–¢–µ–≥'] == tags)
        ]


    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º –∏ –ê–ó–°
    partner_stats = filtered_data.groupby(['–ü–∞—Ä—Ç–Ω–µ—Ä', '–ê–ó–°']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤')

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
    top_partners = partner_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤', ascending=False).head(10)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    st.header(f"–¢–æ–ø-10 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ —Ç–µ–≥—É '{tags}'")

    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    st.dataframe(
        top_partners,
        column_config={
            "–ü–∞—Ä—Ç–Ω–µ—Ä": st.column_config.TextColumn("–ü–∞—Ä—Ç–Ω–µ—Ä", width="medium"),
            "–ù–æ–º–µ—Ä –ê–ó–°": st.column_config.TextColumn("–ù–æ–º–µ—Ä –ê–ó–°"),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤": st.column_config.NumberColumn(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                format="%d",
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"
            )
        },
        hide_index=True,
        use_container_width=True
    )
    data_with_tags = pd.merge(data, tags_category, on='id –û—Ç–∑—ã–≤–∞')

    filtered_data = data[
        (data['–î–∞—Ç–∞'] >= start) &
        (data['–î–∞—Ç–∞'] <= end)
        ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º –∏ –ê–ó–°
    partner_stats = filtered_data.groupby(['–ü–∞—Ä—Ç–Ω–µ—Ä', '–ê–ó–°']).agg(
        –°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥=('–†–µ–π—Ç–∏–Ω–≥', 'mean'),
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=('id –û—Ç–∑—ã–≤–∞', 'count')
    ).reset_index()


    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø—ã
    top_partners = partner_stats.sort_values(['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤'], ascending=[False, False]).head(
        10)
    bottom_partners = partner_stats.sort_values(['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']).head(10)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    st.header("–¢–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–¢–æ–ø-10 —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
        st.dataframe(
            top_partners,
            column_config={
                "–ü–∞—Ä—Ç–Ω–µ—Ä": st.column_config.TextColumn("–ü–∞—Ä—Ç–Ω–µ—Ä", width="small"),
                "–ù–æ–º–µ—Ä –ê–ó–°": st.column_config.TextColumn("–ê–ó–°"),
                "–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": st.column_config.NumberColumn(
                    "–†–µ–π—Ç–∏–Ω–≥",
                    format="%.1f",
                    help="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—Ç–∑—ã–≤–∞–º"
                ),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤": st.column_config.NumberColumn(
                    "–û—Ç–∑—ã–≤–æ–≤",
                    format="%d"
                )
            },
            hide_index=True,
            use_container_width=True
        )

    with col2:
        st.subheader("–¢–æ–ø-10 —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")
        st.dataframe(
            bottom_partners,
            column_config={
                "–ü–∞—Ä—Ç–Ω–µ—Ä": st.column_config.TextColumn("–ü–∞—Ä—Ç–Ω–µ—Ä", width="small"),
                "–ù–æ–º–µ—Ä –ê–ó–°": st.column_config.TextColumn("–ê–ó–°"),
                "–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": st.column_config.NumberColumn(
                    "–†–µ–π—Ç–∏–Ω–≥",
                    format="%.1f"
                ),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤": st.column_config.NumberColumn(
                    "–û—Ç–∑—ã–≤–æ–≤",
                    format="%d"
                )
            },
            hide_index=True,
            use_container_width=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    if not bottom_partners.empty:
        # –ü–æ–ª—É—á–∞–µ–º 5 —Ö—É–¥—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –∏—Ö –ê–ó–° –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        worst_5 = bottom_partners.head(5)[['–ü–∞—Ä—Ç–Ω–µ—Ä', '–ê–ó–°']].values.tolist()
        data_with_tags = pd.merge(data, tags_category, on='id –û—Ç–∑—ã–≤–∞')

        filtered_data = data_with_tags[
            (data_with_tags['–î–∞—Ç–∞'] >= start) &
            (data_with_tags['–î–∞—Ç–∞'] <= end)
            ]
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º (–ø–∞—Ä—Ç–Ω–µ—Ä + –ê–ó–°)
        worst_data = filtered_data[
            filtered_data.apply(lambda x: [x['–ü–∞—Ä—Ç–Ω–µ—Ä'], x['–ê–ó–°']] in worst_5, axis=1)
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É, –ê–ó–° –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_counts = worst_data.groupby(['–ü–∞—Ä—Ç–Ω–µ—Ä', '–ê–ó–°', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']).size().reset_index(
            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        category_counts['–ü–∞—Ä—Ç–Ω–µ—Ä –∏ –ê–ó–°'] = category_counts['–ü–∞—Ä—Ç–Ω–µ—Ä'] + ' (' + category_counts['–ê–ó–°'].astype(str) + ')'

        # –°—Ç—Ä–æ–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = px.bar(
            category_counts,
            x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            y='–ü–∞—Ä—Ç–Ω–µ—Ä –∏ –ê–ó–°',
            color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            orientation='h',
            title='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–ª–æ–± –¥–ª—è 5 —Ö—É–¥—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –∏—Ö –ê–ó–°',
            labels={'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±'},
            color_discrete_sequence=px.colors.qualitative.Pastel,
            height=700,
            barmode='group'
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        fig.update_layout(
            yaxis={'categoryorder': 'total ascending'},
            legend=dict(
                title='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
                orientation='h',
                yanchor='bottom',
                y=-0.5,
                xanchor='center',
                x=0.5
            ),
            margin=dict(b=150)
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        fig.update_traces(
            texttemplate='%{x}',
            textposition='outside'
        )

        st.plotly_chart(fig, use_container_width=True)
if st.session_state.page == 'page3':

    st.write("""# –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤""")

    st.sidebar.header('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã')

    st.sidebar.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:")
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start = st.date_input("–ù–∞—á–∞–ª–æ",
                              value = date(start_year, start_month, start_day),
                              min_value=date(start_year, start_month, start_day),
                              max_value=date(end_year, end_month, end_day))
    with col2:
        end = st.date_input("–ö–æ–Ω–µ—Ü",
                            value=date(end_year, end_month, end_day),
                            min_value=date(start_year, start_month, start_day),
                            max_value=date(end_year, end_month, end_day))

    azs = st.sidebar.multiselect('–ù–æ–º–µ—Ä –ê–ó–°', (number_azs), number_azs)


    filtered_data = data[
            (data['–î–∞—Ç–∞'] >= start) &
            (data['–î–∞—Ç–∞'] <= end) &
            (data['–ê–ó–°'].isin(azs))
            ]


    comment_count = len(filtered_data)
    # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫—É
    st.metric(
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            value=comment_count
        )


    ans, ton = st.columns(2)
    with ans:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        response_stats = filtered_data['–û—Ç–≤–µ—Ç'].apply(
            lambda x: '–° –æ—Ç–≤–µ—Ç–æ–º' if pd.notna(x) else '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞').value_counts().reset_index()
        response_stats.columns = ['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª—å—Ü–µ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        fig_response = px.pie(
            response_stats,
            values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            names='–°—Ç–∞—Ç—É—Å',
            title="–ù–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
            color='–°—Ç–∞—Ç—É—Å',
            # color_discrete_map={
            #     '–° –æ—Ç–≤–µ—Ç–æ–º': '#4CAF50',  # –ó–µ–ª–µ–Ω—ã–π
            #     '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞': '#F44336'  # –ö—Ä–∞—Å–Ω—ã–π
            # },
            hole=0.5  # –î–µ–ª–∞–µ–º –∫–æ–ª—å—Ü–µ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É (donut)
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        fig_response.update_traces(
            textposition='inside',
            textinfo='percent+value',
            insidetextfont=dict(size=12, color='white'),
            marker=dict(
                line=dict(color='#FFFFFF', width=1)
                # colors=['#4CAF50', '#F44336']  # –î—É–±–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
            )
        )

        fig_response.update_layout(
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-0.2,
                xanchor="center",
                x=0.5
            ),
            margin=dict(t=50, b=0, l=0, r=0),
            uniformtext_minsize=12,
            uniformtext_mode='hide'
        )
        st.plotly_chart(fig_response, use_container_width=True)

    with ton:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        data_with_ton = pd.merge(data, tonal, on='id –û—Ç–∑—ã–≤–∞')

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        unanswered = data_with_ton[data_with_ton['–û—Ç–≤–µ—Ç'].isna()]

        filtered_unanswered = unanswered[
            (unanswered['–î–∞—Ç–∞'] >= start) &
            (unanswered['–î–∞—Ç–∞'] <= end) &
            (unanswered['–ê–ó–°'].isin(azs))
            ]
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        tonality_counts = filtered_unanswered['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'].value_counts().reset_index()
        tonality_counts.columns = ['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
        tonality_order = ['–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è', '—Å–º–µ—à–∞–Ω–Ω–∞—è', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', '–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è']
        tonality_counts['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] = pd.Categorical(
            tonality_counts['–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'],
            categories=tonality_order,
            ordered=True
        )
        tonality_counts = tonality_counts.sort_values('–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å')

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        fig = px.bar(
            tonality_counts,
            x='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
            color='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            color_discrete_map={
                '–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è': '#73af48',
                '–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è': '#ff5454',
                '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è': '#ffe354',
                '—Å–º–µ—à–∞–Ω–Ω–∞—è': '#a154ff'
            },
            text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        fig.update_traces(
            textposition='outside',
            marker_line_color='rgb(255,255,255)',
            marker_line_width=1.5,
            opacity=0.9
        )

        fig.update_layout(
            xaxis_title=None,
            yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
            showlegend=False,
            uniformtext_minsize=8,
            uniformtext_mode='hide',
            plot_bgcolor='rgba(0,0,0,0)',
            margin=dict(t=50, b=0, l=0, r=0)
        )

        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
        st.plotly_chart(fig, use_container_width=True)


    # –†–∞–∑–¥–µ–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([2, 5])

    # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –º–µ—Ç—Ä–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with col1:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ —á–∞—Å–∞—Ö)
        avg_time = filtered_data['–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞'].mean()/60
        # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫—É
        st.metric(
            label="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—á–∞—Å—ã)",
            value=f"{avg_time:.1f}",
            help="–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º"
        )

    # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    # with col2:
    #     st.subheader("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    #
    #     # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    #     with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", expanded=True):
    #         # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    #         comments_df = filtered_data[['–î–∞—Ç–∞', '–ê–ó–°', '–û—Ç–∑—ã–≤']]
    #
    #         # # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    #         # comments_df['–¥–∞—Ç–∞'] = comments_df['–¥–∞—Ç–∞'].dt.strftime('%d.%m.%Y')
    #
    #         # –í—ã–≤–æ–¥–∏–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    #         st.dataframe(
    #             comments_df,
    #             column_config={
    #                 "–î–∞—Ç–∞": "–î–∞—Ç–∞",
    #                 "–ê–ó–°": st.column_config.TextColumn("–ê–ó–°", width="small"),
    #                 "–û—Ç–∑—ã–≤": st.column_config.TextColumn("–û—Ç–∑—ã–≤", width="large")
    #             },
    #             hide_index=True,
    #             use_container_width=True,
    #             height=400  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    #         )



